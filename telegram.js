const TelegramBot = require("node-telegram-bot-api");
const tradesFile = require("fs");
const path = require("path");
const tradesPath = path.join(__dirname, "trades.js");

let mcBot = null;
let savedChatId = null;

function initTelegram(token, botInstance) {
  mcBot = botInstance;
  const tg = new TelegramBot(token, { polling: true });

  function saveTrades(trades) {
    const content = "module.exports = " + JSON.stringify(trades, null, 2) + ";\n";
    tradesFile.writeFileSync(tradesPath, content, "utf8");
  }

  tg.on("message", (msg) => {
    if (!savedChatId) savedChatId = msg.chat.id;
    if (!msg.text.startsWith("/")) {
      if (mcBot) mcBot.chat(`${msg.text}`);
    }
  });

  mcBot.setTelegramNotifier((text) => {
    if (savedChatId) tg.sendMessage(savedChatId, text);
    else console.log("[TGBOT] –ù–µ—Ç chat.id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", text);
  });

  tg.onText(/\/start/, (msg) => {
    const helpText = `–ü—Ä–∏–≤–µ—Ç! –Ø MC-—Ç—Ä–µ–π–¥–µ—Ä-–±–æ—Ç.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/inventory - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
/price - –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤
/follow <–Ω–∏–∫> - —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –∏–≥—Ä–æ–∫–æ–º
/stopfollow - –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
/report - –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ
/addtrade <input_name> <input_count> <output_name> <output_count> <diamondValue> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
/deposit <chestName> <item> <count> - –ø–æ–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Å—É–Ω–¥—É–∫
/withdraw <chestName> <item> <count> - –∑–∞–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å—É–Ω–¥—É–∫–∞
/radar on [–Ω–∏–∫1 –Ω–∏–∫2 ...] - –≤–∫–ª—é—á–∏—Ç—å —Ä–∞–¥–∞—Ä, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º—ã
/radar off - –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞–¥–∞—Ä
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`;
    tg.sendMessage(msg.chat.id, helpText);
  });

  tg.onText(/\/inventory/, (msg) => {
    if (!mcBot) return tg.sendMessage(msg.chat.id, "MC-–±–æ—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤");
    const summary = mcBot.getInventorySummary();
    tg.sendMessage(msg.chat.id, `üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n${summary.inventory}`);
  });

  tg.onText(/\/price/, (msg) => {
    const trades = require("./trades");
    const lines = trades.map(t => `${t.input.count}√ó${t.input.name} ‚Üí ${t.output.count}√ó${t.output.name} (—Ü–µ–Ω–∞: ${t.output.diamondValue} –∞–ª–º–∞–∑–æ–≤/—à—Ç)`);
    tg.sendMessage(msg.chat.id, `üí∞ –¢–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã:\n${lines.join("\n")}`);
  });

  tg.onText(/\/follow (.+)/, (msg, match) => {
    const username = match[1].trim();
    if (!mcBot) return tg.sendMessage(msg.chat.id, "MC-–±–æ—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤");
    mcBot.followPlayer(username);
    tg.sendMessage(msg.chat.id, `–°–ª–µ–¥—É—é –∑–∞ –∏–≥—Ä–æ–∫–æ–º: ${username}`);
  });

  tg.onText(/\/stopfollow/, (msg) => {
    if (!mcBot) return tg.sendMessage(msg.chat.id, "MC-–±–æ—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤");
    mcBot.stopFollowing();
    tg.sendMessage(msg.chat.id, "–û—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ");
  });

  tg.onText(/\/report/, (msg) => {
    if (!mcBot) return tg.sendMessage(msg.chat.id, "MC-–±–æ—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤");
    const summary = mcBot.getInventorySummary();
    tg.sendMessage(msg.chat.id,
      `üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n${summary.inventory}\n\n` +
      `üíé –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: ${summary.totalEarnings} –∞–ª–º–∞–∑–æ–≤\n\n` +
      `üìù –ü—Ä–æ–¥–∞–∂–∏:\n${summary.salesHistory}`
    );
  });

  tg.onText(/\/addtrade (\w+) (\d+) (\w+) (\d+) (\d+)/, (msg, match) => {
    const [inputName, inputCount, outputName, outputCount, diamondValue] = match.slice(1);
    const trades = require("./trades");
    trades.push({
      input: { name: inputName, count: parseInt(inputCount) },
      output: { name: outputName, count: parseInt(outputCount), diamondValue: parseInt(diamondValue) }
    });
    saveTrades(trades);
    tg.sendMessage(msg.chat.id, `‚úÖ –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: ${inputCount}√ó${inputName} ‚Üí ${outputCount}√ó${outputName} (—Ü–µ–Ω–∞: ${diamondValue} –∞–ª–º–∞–∑–æ–≤/—à—Ç)`);
  });

  tg.onText(/\/deposit (\w+) (\w+) (\d+)/, (msg, match) => {
    if (!mcBot) return tg.sendMessage(msg.chat.id, "MC-–±–æ—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤");
    const [chest, item, count] = match.slice(1);
    mcBot.depositToChest(chest, item, parseInt(count));
  });

  tg.onText(/\/withdraw (\w+) (\w+) (\d+)/, (msg, match) => {
    if (!mcBot) return tg.sendMessage(msg.chat.id, "MC-–±–æ—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤");
    const [chest, item, count] = match.slice(1);
    mcBot.withdrawFromChest(chest, item, parseInt(count));
  });

  tg.onText(/\/radar (on|off)(.*)/, (msg, match) => {
    if (!mcBot) return tg.sendMessage(msg.chat.id, "MC-–±–æ—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤");
    const action = match[1];
    const targetStr = match[2].trim();
    if (action === "on") {
      const targets = targetStr ? targetStr.split(/\s+/) : [];
      mcBot.setRadar(true, targets);
    } else mcBot.setRadar(false);
  });

  return tg;
}

module.exports = initTelegram;
